#!/bin/bash
#
# $Y/$m/$d.txt contains lines like
#   timestamp work_total/MWh power power_1_1/W power_1_2/W power_2_1/W power_2_2/W
#
# configuration:
#   WR 2 === 2110014178 === strings AB and C
#   WR 1 === 2110014868 === strings DE and F

datadir=../daten

utc=`utc`
echo "$utc:" | tee -a exp

Y=`echo $utc|sed 's/^\(....\).*$/\1/'`
m=`echo $utc|sed 's/^....\(..\).*$/\1/'`
d=`echo $utc|sed 's/^......\(..\).*$/\1/'`

H=`echo $utc|sed 's/^.........\(..\).*$/\1/'`
M=`echo $utc|sed 's/^...........\(..\).*$/\1/'`

mkdir -m 755 $datadir/$Y 2>/dev/null
mkdir -m 755 $datadir/$Y/$m 2>/dev/null
touch $datadir/$Y/$m/$d.txt
chmod 644 $datadir/$Y/$m/$d.txt

rm csv.out
touch csv.out
chmod 644 csv.out

echo "`utc`: begin wget" | tee -a exp
####### # cp ../daten/2011/11/raw.20111108.csv csv.tmp
if ! wget --ftp-user=user --ftp-password=`cat passwd` -O csv.tmp "ftp://h6pv.qipc.org/CSV/$Y/$m/$Y-$m-$d.csv" ; then
  echo "`utc`: FAILED 1" | tee -a exp
  exit 1
fi
echo "`utc`: wget finished" | tee -a exp

snline=false
headerline=false

# replace trailing CR by semicolon (otherwise, last field in line will not trigger):
sed -s 's/.$/;/' < csv.tmp \
| while IFS=';' read \
  c00 c01 c02 c03 c04 c05 c06 c07 c08 c09  \
  c10 c11 c12 c13 c14 c15 c16 c17 c18 c19 \
  c20 c21 c22 c23 c24 c25 c26 c27 c28 c29 \
  c30 c31 c32 c33 c34 c35 c36 c37 c38 c39 \
  c40 c41 c42 c43 c44 c45 c46 c47 c48 c49 \
  c50 c51 c52 c53 c54 c55 c56 c57 c58 c59 \
  c60 c61 c62 c63 c64 c65 c66 c67 \
; do

  if ! $snline ; then
    if [ "$c01" == '155001233' ] ; then
      snline=true
      for (( i=0 ; i <= 67 ; i++ )) ; do
        n=`printf '%02u' $i`
        eval "sn$n="'$'"c$n"
      done
    fi
    continue
  fi
  if ! $headerline ; then

    if [ "$c01" = "Metering.TotWhOut" ] ; then
      echo "`utc`: headerline detected:" | tee -a exp

      for (( i=0 ; i <= 67 ; i++ )) ; do
        n=`printf '%02u' $i`
        tag=`eval echo '$'c$n`
        sn=`eval echo '$'sn$n`
        # echo "[$n]"
        # echo "[$tag]"
        # echo "[$sn]"
        # echo
        # echo $i:$sn:$tag
        case "$tag" in
          'Metering.TotWhOut' )
            if [ ! "$i_total_work" ] ; then
              i_total_work=$i
            fi
          ;;
          'GridMs.TotW' )
            if [ ! "$i_total_power" ] ; then
              i_total_power=$i
            fi
          ;;
          'DcMs.Watt[001]' )
            # echo "1:$sn"
            case "$sn" in
              '155001233' )
                i_0_1=$i
              ;;
              '2110014178' )
                i_1_1=$i
              ;;
              '2110014868' )
                i_2_1=$i
              ;;
            esac
          ;;
          'DcMs.Watt[002]' )
            # echo "2:$sn"
            case "$sn" in
              '155001233' )
                i_0_2=$i
              ;;
              '2110014178' )
                i_1_2=$i
              ;;
              '2110014868' )
                i_2_2=$i
              ;;
            esac
          ;;
        esac
      done

      echo "`utc`: fields detected: [$i_total_power,$i_total_work,$i_0_1,$i_0_2,$i_1_1,$i_1_2,$i_2_1,$i_2_2]"  | tee -a exp
      if echo ",$i_total_power,$i_total_work,$i_1_1,$i_1_2,$i_2_1,$i_2_2," | grep -q ',,' ; then
        echo "`utc`: FAILED: malformed headerline" | tee -a exp
        exit 2
      fi
      headerline=true
      chmod 644 csv.tmp
      mv csv.tmp "$datadir/$Y/$m/raw.$Y$m$d.csv"
    fi
    continue
  fi

  timestamp="$c00"

  if [[ "$timestamp" =~ '20'..-..-..' '.. ]] ; then
    # echo "`utc`: looks like valid timestamp: [$timestamp]" | tee -a exp
    : nop
  else
    # echo "`utc`: invalid timestamp [$timestamp], skipping line" | tee -a exp
    continue
  fi

  n_total_power=`printf 'c%02u' $i_total_power`
  n_total_work=`printf 'c%02u' $i_total_work`
  n_1_1=`printf 'c%02u' $i_1_1`
  n_1_2=`printf 'c%02u' $i_1_2`
  n_2_1=`printf 'c%02u' $i_2_1`
  n_2_2=`printf 'c%02u' $i_2_2`

  work_total=`eval echo '$'$n_total_work`
  power_1_1=`eval echo '$'$n_1_1`
  power_1_2=`eval echo '$'$n_1_2`
  power_2_1=`eval echo '$'$n_2_1`
  power_2_2=`eval echo '$'$n_2_2`

  # dirty kludge if the total power col is missing (what the fuck are they doing????)
  # (the parser then catches a high-numbered per-inverter col instead):
  #
  if [ "$i_total_power" -lt 10 ] ; then
    power_total=`eval echo '$'$n_total_power`
  else
    # echo 2 k 0$power_1_1 0$power_1_2 + 0$power_2_1 + 0$power_2_2 + p q 
    # echo 2 k 0$power_1_1 0$power_1_2 + 0$power_2_1 + 0$power_2_2 + p q  | dc
    power_total=`echo 2 k 0$power_1_1 0$power_1_2 + 0$power_2_1 + 0$power_2_2 + p q | dc`
  fi

  [ "$power_total" ] || power_total=0
  [ "$work_total" ] || work_total=0
  [ "$power_1_1" ] || power_1_1=0
  [ "$power_1_2" ] || power_1_2=0
  [ "$power_2_1" ] || power_2_1=0
  [ "$power_2_2" ] || power_2_2=0
  
  # echo "`utc`: line parsed: $imestamp: $work_total, $power_total [$power_1_1 $power_1_2] [$power_2_1 $power_2_2]" | tee -a exp

  work_total_kWh=`echo "2k $work_total 1000 * p q" | dc`
  work_total_MWh=$work_total
  
  work_total_kWh=`printf %.0f "$work_total_kWh"`
  work_total_MWh=`printf %.3f "$work_total_MWh"`

  Yi=`echo "$timestamp" | sed 's/^\(....\).*/\1/'`
  Mi=`echo "$timestamp" | sed 's/^.....\(..\).*/\1/'`
  Di=`echo "$timestamp" | sed 's/^........\(..\).*/\1/'`
  hi=`echo "$timestamp" | sed 's/^...........\(..\).*/\1/'`
  mi=`echo "$timestamp" | sed 's/^..............\(..\).*/\1/'`

  wi=`date -d "$Yi-$Mi-$Di" +%w`

  # avoid octal interpretation in arithmetics below:
  #
  Di=`echo "$Di" | sed 's/^0//'`

  # webbox is broken and doesn't support utc (even though it claims to), so we kludge around
  # daylight saving insanities:
  #
  case "$Mi" in
    11 | 12 | 01 | 02 )
      dst=false
    ;;
    04 | 05 | 06 | 07 | 08 | 09 )
      dst=true
    ;;
    03 )
      # Di - wi is day-of-month of most recent sunday;
      # if > 24, this was the last sunday of march and we are in dst mode now:
      #
      if [ $((Di-wi)) -gt 24  ] ; then
        dst=true
      else
        dst=false
      fi
    ;;
    10 )
      if [ $((Di-wi)) -gt 24  ] ; then
        dst=false
      else
        dst=true
      fi
    ;;
  esac

  if $dst; then
    : fine: plain utc
    : nop
  else
    : broken: utc _minus_ dst hour - fix it:
    hi=`echo "$hi" | sed 's/^0//'`
    hi=`printf '%02u' $((hi+1))`
  fi
  
### old kludge - wasn't sufficient :-(
#   # fix time zone insanities (should work east of greenwhich)
#   #
#   while [ \( "$hi" -ge 1 \) -a \( "$hi$mi" -ge "$H$M" \) ] ; do
#     hi=$((hi-1))
#   done

  # echo "`utc`: canonical units: $hi$mi[$dst]: $work_total_MWh, $power_total [$power_1_1 $power_1_2] [$power_2_1 $power_2_2]" | tee -a exp
  echo "$hi$mi $work_total_MWh $power_total $power_1_1 $power_1_2 $power_2_1 $power_2_2" >> csv.out

done

mv csv.out $datadir/$Y/$m/$d.txt

echo "`utc`: done." | tee -a exp

